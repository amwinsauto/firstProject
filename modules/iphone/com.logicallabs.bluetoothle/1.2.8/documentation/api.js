YUI.add("yuidoc-meta", function(Y) {
   Y.YUIDoc = { meta: {
    "classes": [
        "Beacon",
        "BeaconRegion",
        "BluetoothLEModule",
        "Central",
        "Characteristic",
        "Descriptor",
        "Peripheral",
        "Request",
        "Service"
    ],
    "modules": [
        "Readme"
    ],
    "allModules": [
        {
            "displayName": "Readme",
            "name": "Readme",
            "description": "This module makes the iOS Core Bluetooth framework available to Titanium developers.\n\nTo access this module from JavaScript, you would do the following:\n\n\tvar BluetoothLE = require(\"com.logicallabs.bluetoothle\");\n\nThe BluetoothLE variable is a reference to the Module object.\n\nThe iOS Core Bluetooth framework defines numerous object classes. The module\nexposes most of these in the form of Titanium proxy objects. Specifically:\n\n* Characteristic: wrapper for CBCharacteristic and CBMutableCharacteristic\n* Descriptor: wrapper for CBDescriptor and CBMutableDescriptor\n* Peripheral: wrapper for CBPeripheral\n* Request: wrapper for CBATTRequest\n* Central: wrapper for CBCentral\n* Service: wrapper for CBService and CBMutableService\n\nYou do not need to (and in fact: can't) create any of these objects explicitly.\nYou will, however, receive instances of these (proxy) classes as event\nparameters. With a few exceptions, the properties available on these JavaScript objects\ncorrespond to the properties of their counterpart(s) in the Core Bluetooth framework.\n\nThe module also maintaines, internally, one instance of CBPeripheralManager\nand CBCentralManager. You do not have direct access to these objects. You\ncan access them through methods attached to the module object. Delegate methods\nare represented by events fired by the module object. The properties of\nthe event object correspond to the parameters of the given delegate method.\n\n## Usage\n\nThe following code segments are not complete; they only demonstrate the\nessentials of using the module. The module includes a complete example app\nthat demonstrates many different use cases, including iOS-to-iOS communication,\ncommunicating with a heart rate monitor, and monitoring iBeacons. You will\nfind this in the standard <code>example</code> directory.\n\nBasic steps of discovering and connecting to a peripheral from the central:\n\n\tvar BluetoothLE = require('com.logicallabs.bluetoothle'),\n\n\tBluetoothLE.addEventListener('centralManagerStateChange', function(e) {\n\t    if (e.state === BluetoothLE.CENTRAL_MANAGER_STATE_POWERED_ON) {\n\t        BluetoothLE.startScan();\n\t    }\n\t});\n\t\n\tBluetoothLE.addEventListener('discoveredPeripheral', function(e) {\n\t    BluetoothLE.stopScan();\n\t    BluetoothLE.connectPeripheral({\n\t        peripheral: e.peripheral\n\t    });\n\t});\n\n\tBluetoothLE.initCentralManager();\n\nBasic steps of defining a service and starting advertisement as a peripheral:\n\n\tBluetoothLE.addEventListener('peripheralManagerStateChange', function(e) {\n\t    if (e.state === BluetoothLE.PERIPHERAL_MANAGER_STATE_POWERED_ON) {\n\t        BluetoothLE.addService({\n\t            uuid: CUSTOM_SERVICE_UUID,\n\t            primary: true,\n\t            characteristics: [\n\t                {\n\t                    uuid: NOTIF_CHAR_UUID,\n\t                    properties: BluetoothLE.CHAR_PROP_NOTIFY,\n\t                    permissions: BluetoothLE.CHAR_PERM_NONE\n\t                },\n\t                {\n\t                    uuid: READ_CHAR_UUID,\n\t                    properties: BluetoothLE.CHAR_PROP_READ,\n\t                    permissions: BluetoothLE.CHAR_PERM_READABLE\n\t                 },\n\t                 {\n\t                     uuid: WRITE_CHAR_UUID,\n\t                     properties: BluetoothLE.CHAR_PROP_WRITE_WITHOUT_RESPONSE,\n\t                     permissions: BluetoothLE.CHAR_PERM_READABLE + BluetoothLE.CHAR_PERM_WRITEABLE\n\t                 }\n\t            ]\n\t        });\n\n\t        advertParams = {};\n\t        advertParams[BluetoothLE.ADVERT_DATA_KEY_SERVICE_UUIDS] = [ CUSTOM_SERVICE_UUID ];\n\t        advertParams[BluetoothLE.ADVERT_DATA_KEY_LOCAL_NAME] = Ti.Platform.username;\n\t        BluetoothLE.startAdvertising(advertParams);\n\t    }\n\t});\n\t\n\tBluetoothLE.initPeripheralManager();\n\nBasic steps for querying the value of a characteristic:\n\n\tperipheral.addEventListener('updatedValueForCharacteristics', function(e) {\n\t    Ti.API.info('Received new value for characteristic ' + e.characteristic.UUID);\n\t    Ti.API.info('Value as string: ' + e.value)\n\t    Ti.API.info('First byte of value: ' + e.value[0]);\n\t});\n\n\tperipheral.readValueForCharacteristic(readChar);\n\nBasic steps to respond to a read request (on the central):\n\n\tBluetoothLE.addEventListener('receivedReadRequest', function(e) {\n\t    var buffer;\n\t\n\t    Ti.API.info('Received read request for characteristic: ' + e.request.characteristic.UUID);\n\t    buffer = Ti.createBuffer({ length: 3 });\n\t    buffer[0] = 1;\n\t    buffer[1] = 2;\n\t    buffer[2] = 3;\n\n\t    e.request.value = buffer;\n\n\t    BluetoothLE.respondToRequest({\n\t        request: e.request,\n\t        result: BluetoothLE.ATT_SUCCESS\n\t    });\n\t});\n\nNote that the last two examples demonstrate how to access and construct the\nvalue of a characteristic as an array of bytes. This is a built-in (although\nundocumented) capability of the TiBuffer objects that are used to represent\nthese values.\n\n## Beacons\n\nUse the\n{{#crossLink \"BluetoothLEModule/createBeaconRegion:method\"}}{{/crossLink}}\nfunction to create beacon region objects:\n\n\tvar beaconRegion = BluetoothLE.createBeaconRegion({\n\t\tUUID: uuid,\n\t\tidentifier: '#' + idCounter\n\t});\n\nThis object then can be passed to the\n{{#crossLink \"BluetoothLEModule/startRegionMonitoring:method\"}}{{/crossLink}}\nfunction to start monitoring:\n\n\tBluetoothLE.startRegionMonitoring({\n\t\tbeaconRegion: region\n\t});\n\nThis will result in\n{{#crossLink \"BluetoothLEModule/enteredRegion:event\"}}{{/crossLink}},\n{{#crossLink \"BluetoothLEModule/exitedRegion:event\"}}{{/crossLink}}, and\n{{#crossLink \"BluetoothLEModule/regionStateUpdated:event\"}}{{/crossLink}} events.\n\nYou will typically want to call the\n{{#crossLink \"BluetoothLEModule/requestRegionState:method\"}}{{/crossLink}}\nfunction right after you call\n{{#crossLink \"BluetoothLEModule/startRegionMonitoring:method\"}}{{/crossLink}}\nto get an update of the current region state immediately. Otherwise you might\nonly receive the first update when the state of a region changes. This can\nbe a problem if the user is in the region you are interested in at the time\nthe app starts.\n\nOnce the user enters a region, the\n{{#crossLink \"BluetoothLEModule/startRangingBeacons:method\"}}{{/crossLink}}\nfunction can be used to get periodic updates about the beacons in range:\n\n\tBluetoothLE.addEventListener('regionStateUpdated', function(e) {\n\t\tswitch(e.state) {\n\t\t\tcase BluetoothLE.REGION_STATE_INSIDE:\n\t\t\t\tBluetoothLE.startRangingBeacons({\n\t\t\t\t\tbeaconRegion: e.region\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tcase BluetoothLE.REGION_STATE_OUTSIDE:\n\t\t\t\tBluetoothLE.stopRangingBeacons({\n\t\t\t\t\tbeaconRegion: e.region\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t}\n\t});\n\nThis will result in\n{{#crossLink \"BluetoothLEModule/rangedBeacons:event\"}}{{/crossLink}} events.\n\nUse the\n{{#crossLink \"BluetoothLEModule/stopRangingBeacons:method\"}}{{/crossLink}} and\n{{#crossLink \"BluetoothLEModule/stopRegionMonitoring:method\"}}{{/crossLink}}\nfunctions to stop ranging and monitoring, respectively.\n\n## Background operations\n\nIf the app started beacon region monitoring, it will receive\n{{#crossLink \"BluetoothLEModule/enteredRegion:event\"}}{{/crossLink}},\n{{#crossLink \"BluetoothLEModule/exitedRegion:event\"}}{{/crossLink}}, and\n{{#crossLink \"BluetoothLEModule/regionStateUpdated:event\"}}{{/crossLink}} events\nwhile in the background. The <code>iBeacons</code> example demonstrates how\nto display a local notification to the user when this happens.\n\nThe app will also receive generic Bluetooth LE related events while in the\nbackground if you declare the appropriate background modes in the Info.plist\nfile. For Titanium apps, this can be done in the tiapp.xml file as follows:\n\n\t<ios>\n       <plist>\n           <dict>\n               <key>UIBackgroundModes</key>\n               <array>\n\t                <string>bluetooth-central</string>\n\t                <string>bluetooth-peripheral</string>\n               </array>\n           </dict>\n       </plist>\n\t</ios>\n\n## Restarting into the background\n\nStarting with iOS 7, BLE and beacon related events can trigger the app\nto be restarted into (!) the background after it was stopped (removed from\nmemory) by iOS to free up resources. Starting with iOS7.1, beacon related\nevents can restart the app into the background even if the user explicitly\nremoved the app from the active app list.\n\nIn order to take advantage of this feature, specify a <code>restoreIdentifier</code>\nparameter of the\n{{#crossLink \"BluetoothLEModule/initCentralManager:method\"}}\n{{/crossLink}} and\n{{#crossLink \"BluetoothLEModule/initPeripheralManager:method\"}}\n{{/crossLink}} functions, or simply start monitoring a beacon region.\n\nWhen the app starts, the\n{{#crossLink \"BluetoothLEModule/restoredCentralManagerIdentifiers:property\"}}{{/crossLink}}\nand\n{{#crossLink \"BluetoothLEModule/restoredPeripheralManagerIdentifiers:property\"}}{{/crossLink}}\nproperties will hold the restoraiton identifiers of the central and\nperipheral managers, respectively, that can be restored. Restoration is\ninitiated by calling the\n{{#crossLink \"BluetoothLEModule/initCentralManager:method\"}}\n{{/crossLink}} and\n{{#crossLink \"BluetoothLEModule/initPeripheralManager:method\"}}\n{{/crossLink}} functions with the previously used\n<code>restoreIdentifier</code>. Thereafter the\n{{#crossLink \"BluetoothLEModule/peripheralWillRestoreState:event\"}}\n{{/crossLink}} and\n{{#crossLink \"BluetoothLEModule/centralWillRestoreState:event\"}}\n{{/crossLink}} will be fired to complete the restoration.\n\nIf the restart was triggered by a beacon related event, the\n{{#crossLink \"BluetoothLEModule/wasLocationLaunch:property\"}}{{/crossLink}}\nproperty will be <code>true</code>. Use the\n{{#crossLink \"BluetoothLEModule/retrieveMonitoredRegions:method\"}}{{/crossLink}}\nfunction to retrieve the beacon regions that are already being monitored.\n\n## Beacon Usage Permissions\n\nStarting with iOS 8, the authorization model related to location services,\nand thus beacons, has changed. If the app wants to use beacon related\nfunctionality, it now needs to explicitly call either the\n{{#crossLink \"BluetoothLEModule/requestWhenInUseAuthorization:method\"}}\n{{/crossLink}} or the\n{{#crossLink \"BluetoothLEModule/requestAlwaysAuthorization:method\"}}\n{{/crossLink}} function, and specify either the\n<code>NSLocationAlwaysUsageDescription</code> or the\n<code>NSLocationWhenInUseUsageDescription</code>\nInfo.plist entry in tiapp.xml:\n\n\t<ios>\n       <plist>\n           <dict>\n               <key>NSLocationAlwaysUsageDescription</key>\n               <string>\n\t\t\t\t\tPlease allow access to enable beacon monitoring!\n\t\t\t\t</string>\n               <key>NSLocationWhenInUseUsageDescription</key>\n               <string>\n\t\t\t\t\tPlease allow access to enable beacon ranging!\n\t\t\t\t</string>\n           </dict>\n       </plist>\n\t</ios>\n\nWhen the app calls the\n{{#crossLink \"BluetoothLEModule/requestWhenInUseAuthorization:method\"}}\n{{/crossLink}} or the\n{{#crossLink \"BluetoothLEModule/requestAlwaysAuthorization:method\"}}\n{{/crossLink}} function, the user is presented with a dialog that requests\npermission. The string you associated with the\n<code>NSLocationAlwaysUsageDescription</code> or the\n<code>NSLocationWhenInUseUsageDescription</code>\nkey will be displayed to the user in this dialog.\n\nThe difference between \"when-in-use\" and \"always\" authorization is significant:\n\"when-in-use\" means that the app can only access these services while it's\nrunning in the foreground, and it cannot request region monitoring even then.\nTherefore many apps that use beacons will need \"always\" authorization.\n\nHowever, Apple discourages the use of \"always\" authorization. To quote:\n\"Requesting “Always” authorization is discouraged because of the potential\nnegative impacts to user privacy. You should request this level of\nauthorization only when doing so offers a genuine benefit to the user.\"\n\n## Issues and Limitations\n\nWhen using an iOS device as peripheral, the advertisement packets may only\ncontain the ADVERT\\_DAT\\_KEY\\_SERVICE\\_UUIDS and/or ADVERT\\_DATA\\_KEY\\_LOCAL\\_NAME\nfields. This is a limitation of the Core Bluetooth framework.\n\nWhile testing Core Bluetooth framework (without Titanium), we experienced\nsome unexplained problems that were eventually resolved by resetting the devices.\n\n## Change Log\n\n### Version 1.0.1\n\n* Added RSSI example to sample app.\n* Added TiBuffer-as-array example to sample app.\n* Bug fixes in sample app.\n* Fixed typos in documentation.\n* Added more examples to documentation.\n\n### Version 1.0.2\n* Improved examples and documentation.\n* Fixed defect in discoverCharacteristics function of Peripheral.\n* Added writeValueForDescriptor method to Peripheral object.\n* Fixed defect in retrievePeripherals function of the module object.\n\n### Version 1.0.3\n* Changed sample app styling.\n* Tested with iOS7.\n* Added ability to include module in apps built for older iOS versions without\n  Bluetooth Low Energy capability.\n\n### Version 1.0.4\n* Improved background functionality.\n* Documentation updates.\n\n### Version 1.1.0\n* Introduced {{#crossLink \"Peripheral/state:property\"}}{{/crossLink}} property on {{#crossLink \"Peripheral\"}}{{/crossLink}}\nobjects and related constants.\n* Added support for {{#crossLink \"Beacon\"}}{{/crossLink}}s and {{#crossLink \"BeaconRegion\"}}{{/crossLink}}s.\n* Introduced {{#crossLink \"Central/maximumUpdateValueLength:property\"}}{{/crossLink}} property on {{#crossLink \"Central\"}}{{/crossLink}}\nobjects.\n* Introduced\n{{#crossLink \"Characteristic/subscribedCentrals:property\"}}{{/crossLink}} property and\n{{#crossLink \"Characteristic/equals:method\"}}{{/crossLink}} function\non {{#crossLink \"Characteristic\"}}{{/crossLink}}\nobjects.\n* Introduced {{#crossLink \"BluetoothLEModule/backgroundDataAuthorizationStatus:property\"}}\n{{/crossLink}} property on the {{#crossLink \"BluetoothLEModule\"}}{{/crossLink}}\nobject and related constants.\n* Added the\n{{#crossLink \"BluetoothLEModule/retrievePeripheralsWithIdentifiers:method\"}}\n{{/crossLink}}, and\n{{#crossLink \"BluetoothLEModule/retrieveConnectedPeripheralsWithServices:method\"}}\n{{/crossLink}} functions.\n* Added\n{{#crossLink \"BluetoothLEModule/ADVERT\\_DATA\\_KEY\\_IS\\_CONNECTABLE:attribute\"}}\n{{/crossLink}}, and\n{{#crossLink \"BluetoothLEModule/ADVERT\\_DATA\\_KEY\\_SOLICITED\\_SERVICE_UUIDS:attribute\"}}\n{{/crossLink}} constants.\n* Sample app improvements.\n* Documentation fixes.\n\n### Version 1.1.1\n* Extended iBeacon example with multiple regions.\n* Added {{#crossLink \"BeaconRegion/identifier:property\"}}{{/crossLink}}\nproperty to {{#crossLink \"BeaconRegion\"}}{{/crossLink}} class.\n* Added Estimote Beacons to example app.\n\n### Version 1.1.2\n* Added {{#crossLink \"BluetoothLEModule/proximityChange:event\"}}{{/crossLink}} event.\n* Added {{#crossLink \"BluetoothLEModule/rangedRegions:property\"}}{{/crossLink}} property.\n* Added option to turn off ranging for all regions at once.\n* Added {{#crossLink \"BluetoothLEModule/filterDuplicateBeacons:property\"}}{{/crossLink}} property.\n* Added {{#crossLink \"BluetoothLEModule/locationManagerAuthorizationStatus:property\"}}{{/crossLink}}\nproperty, {{#crossLink \"BluetoothLEModule/locationManagerAuthorizationChanged:event\"}}{{/crossLink}}\nevent, and related constants.\n\n### Version 1.1.3\n* Improved iBeacon and Estimote Beacon examples.\n\n### Version 1.2.0\n* Improved documentation and sample app\n* Introduced the\n{{#crossLink \"BluetoothLEModule/moduleReady:event\"}}{{/crossLink}} event.\n\n### Version 1.2.2\n\n* Improved the\n{{#crossLink \"Peripheral/updatedValueForCharacteristic:event\"}}{{/crossLink}}\nevent.\n* Documentation improvements.\n* Added BPM V125 example.\n\n### Version 1.2.3\n\n* Added example for Texas Instruments CC2541 Sensor Tag.\n\n### Version 1.2.4\n\n* Documentation improvements\n* Sample app improvements\n* Added\n{{#crossLink \"BluetoothLEModule/requestRegionState:method\"}}{{/crossLink}}\nfunction.\n\n### Version 1.2.5\n\n* Added\n{{#crossLink \"BluetoothLEModule/restoredCentralManagerIdentifiers:property\"}}{{/crossLink}}\nand\n{{#crossLink \"BluetoothLEModule/restoredPeripheralManagerIdentifiers:property\"}}{{/crossLink}}\nproperties.\n* Added\n{{#crossLink \"BluetoothLEModule/retrieveMonitoredRegions:method\"}}{{/crossLink}}\nfunction and\n{{#crossLink \"BluetoothLEModule/retrievedMonitoredRegions:event\"}}{{/crossLink}}\nevent.\n* Added\n{{#crossLink \"BluetoothLEModule/wasLocationLaunch:property\"}}{{/crossLink}}\nproperty.\n\n### Version 1.2.6\n\n* Fixed bug related to service data in\n{{#crossLink \"BluetoothLEModule/discoveredPeripheral:event\"}}{{/crossLink}} event.\n\n### Version 1.2.7\n\n* Introduced the\n{{#crossLink \"BluetoothLEModule/requestWhenInUseAuthorization:method\"}}\n{{/crossLink}} and\n{{#crossLink \"BluetoothLEModule/requestAlwaysAuthorization:method\"}}\n{{/crossLink}} functions.\n* Updated Readme with Beacon Usage Permissions section.\n* Updated sample app.\n\n### Version 1.2.8\n\n* Added 64-bit support.\n* Updated license.\n\n## Author\n\nZsombor Papp, Logical Labs\n\ntitanium@logicallabs.com\n\n## License\n\nSee LICENSE file included with the module for all terms and conditions specific to this module.\n\nGeneral terms and conditions for all Logical Labs Titanium Modules can be found here: http://www.logicallabs.com/logical-labs-titanium-module-terms-conditions\n\n## Copyright\n\nCopyright (c) 2012-2014 by Logical Labs, LLC"
        }
    ]
} };
});